manifest {
    mainScript = 'main.nf'
}

tower {
  accessToken = ''
  enabled = false
}

// default parameters
params {
    cores = '4'
    memory = '18 GB'
    help = false
    profile = false

    // input
    nano = ''
    illumina = ''
    fasta = ''
    sra = ''
    list = false

    clean_ill = "${baseDir}/clean/NC_001422.fna.gz" // phiX fasta
    clean_ont = "${baseDir}/clean/ont/DCS.mmi" // DCS fasta minimap2 index
    clean_assembly = '' // will be decided during runtime
    
    host = ''
    species = ''
    phix = true
    dcs = true

    // parameters
    gsize = ''
    length = '500'
    model = 'r941_min_high_g360'
    fastp_additional_params = '-5 -3 -W 4 -M 20 -l 20 -x -n 5 -z 6'

    // SRA key
    key = ""

    // databases
    dia_db = false

    // workflow adjustments
    assemblerHybrid = 'spades'
    assemblerLong = 'flye'

    // folder structure
    output = 'results'

    // ENA-specific params
    study = ''
    sample = ''
    run = ''

    // location for storing the conda or singularity environments
    condaCacheDir = 'conda'
    singularityCacheDir = 'singularity'

    // location for autodownload data like databases
    dbs = 'nextflow-autodownload-databases'

    // optional profile configurations, mostly necessary for HPC execution [lsf, slurm]
    workdir = "/tmp/nextflow-work-$USER"
}

profiles {

    //executors
    local { 
        workDir = params.workdir
        params.databases = params.dbs
        params.cloudProcess = false
        includeConfig 'configs/local.config'
    }

    lsf {
        workDir = params.workdir
        params.databases = params.dbs
        executor {
            name = "lsf"
            queueSize = 200
        }        
        params.cloudProcess = true
        process.cache = "lenient"
        includeConfig 'configs/node.config'
    }

    slurm {
        workDir = params.workdir
        params.databases = params.dbs
        executor {
            name = "slurm"
            queueSize = 200
        }        
        params.cloudProcess = true
        process.cache = "lenient"
        includeConfig 'configs/node.config'
    }


    //engines
    docker { 
        docker { enabled = true }
        includeConfig 'configs/container.config'
    }

    singularity {
        singularity { 
                enabled = true
                autoMounts = true
                cacheDir = params.singularityCacheDir
        }
        includeConfig 'configs/container.config'
    }

    conda { 
        conda {
            cacheDir = params.condaCacheDir
        }
        includeConfig 'configs/conda.config'
    }


    //pre-merged
    standard { 
        workDir = params.workdir
        params.cloudProcess = false
        includeConfig 'configs/local.config'
        docker { enabled = true }
        includeConfig 'configs/container.config'
    }

    nih {
        params.workdir = "/data/$USER/nextflow-work"
        params.databases = "/data/$USER/nextflow-databases/"
        params.cachedir = "/data/$USER/nextflow-singularity/"

        workDir = params.workdir
        executor {
            name = "slurm"
            queueSize = 200
        }        
        params.cloudProcess = true
        process.cache = "lenient"
        includeConfig 'configs/node.config'

        singularity { 
                enabled = true
                autoMounts = true
                cacheDir = params.cachedir
        }
        includeConfig 'configs/container.config' 
    }
    
    ebi {
  	    params.workdir = "/hps/nobackup2/production/metagenomics/$USER/nextflow-work-$USER"
  	    params.databases = "/hps/nobackup2/production/metagenomics/$USER/nextflow-databases/"
  	    params.cachedir = "/hps/nobackup2/singularity/$USER"

        workDir = params.workdir
        executor {
            name = "lsf"
            queueSize = 200
        }        
        params.cloudProcess = true
        process.cache = "lenient"
        includeConfig 'configs/node.config'

        singularity { 
                enabled = true
                autoMounts = true
                cacheDir = params.cachedir
        }
        includeConfig 'configs/container.config' 

        
        /*
	process {
            withLabel: spades { cpus = 32;
                                memory = 90.GB * task.attempt;
                                clusterOptions = '-P bigmem'; 
                                errorStrategy { task.exitStatus in 130..140 ? 'retry' : 'terminate' };
				maxRetries 4 }
	
            withLabel: flye {   cpus = 30; 
                                memory { 120.GB * task.attempt };
                                clusterOptions = '-P bigmem';
                                errorStrategy { task.exitStatus in 130..140 ? 'retry' : 'terminate' };
                                maxRetries 3 }
        }
        */
    }

    yoda {
  	    params.workdir = "/hps/nobackup2/metagenomics/$USER/nextflow-work-$USER"
  	    params.databases = "/hps/nobackup2/metagenomics/$USER/nextflow-databases/"
  	    params.cachedir = "/hps/nobackup2/metagenomics/$USER/singularity"

        workDir = params.workdir
        executor {
            name = "lsf"
            queueSize = 200
        }        
        params.cloudProcess = true
        process.cache = "lenient"
        includeConfig 'configs/node.config'

        singularity { 
                enabled = true
                autoMounts = true
                cacheDir = params.cachedir
        }
        includeConfig 'configs/container.config' 

        process {
            withLabel: spades { cpus = 32; memory = {1600.GB * task.attempt}; clusterOptions = '-P bigmem'; errorStrategy = { task.exitStatus in 1 || 130..140 ? 'retry' : 'terminate' }; maxRetries = 4; }
	}
    }

    ara {
      	params.workdir = "/beegfs/rna-hta/$USER/work"
  	    params.databases = "/beegfs/rna-hta/$USER/nextflow-databases/"
        conda.cacheDir = "/beegfs/rna-hta/$USER/nextflow-mgnify-lr-conda-cache"

        workDir = params.workdir
        executor {
            name = "slurm"
            queueSize = 200
        }        
        params.cloudProcess = true
        process.cache = "lenient"
        includeConfig 'configs/node.config'

        includeConfig 'configs/conda.config' 

        process {
            clusterOptions = '--partition=s_standard,s_fat,b_standard,b_fat'
            withLabel: smallTask { executor = 'local' }
        }
    }

    // CONFIGURE YOUR PRIVATE CLOUD
    gcloud {             
        params.databases = 'gs://databases-matrice/databases/'
        bucketDir = 'gs://matrice/nextflow-tmp/virify'
        //workDir = "/tmp/nextflow-work-$USER"

        executor { name = 'google-lifesciences' }
 
        google {
            project = 'nextflow-auto-255816'
            zone = 'europe-west1-b' 
            lifeSciences.bootDiskSize = '20.GB'
        }  

        params.cloudProcess = true
        includeConfig 'configs/node.config'

        docker { enabled = true }
        includeConfig 'configs/container.config'

        cloud { preemptible = true }

        // we need a docker also for basic functionalities in the cloud
        process {
            withLabel: noDocker { cpus = 1; memory = '4.0 GB'; container = 'nanozoo/template:3.8--ccd0653' } 
        }

    }

}