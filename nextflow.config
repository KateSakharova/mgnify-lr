manifest {
    mainScript = 'main.nf'
    nextflowVersion = '>=22.04.0'
}

// default parameters
params {
    run_accession = ""
    singularity_cachedir = ""
    cores = '4'
    max_cores = Runtime.runtime.availableProcessors()
    cores = Runtime.runtime.availableProcessors().intdiv(4)
    memory = 8.GB
    max_memory = 24.GB
    help = false
    profile = false

    // input
    nano = ''
    illumina = ''
    sra = ''
    list = false

    bbduk = ''
    index_ont = ''
    index_fna = ''
    index_ill = ''

    host = ''
    species = ''
    phix = true
    dcs = true

    // parameters
    gsize = ''
    length = '500'
    model = 'r941_min_sup_g507'
    // SRA key
    key = ""

    // databases
    dia_db = false

    // workflow adjustments
    assemblerHybrid = 'spades'
    assemblerLong = 'flye'

    // folder structure
    output = 'results'

    // ENA-specific params
    study = ''
    sample = ''
    run = ''

    // optional profile configurations, only necessary for HPC LSF execution
    cloudDatabase = 'nextflow-databases'
    singularityCacheDir = 'singularity'
    condaCacheDir = 'conda'
}

profiles {

    // executors
    local {
        executor {
            name = "local"
            cpus = params.max_cores
            memory = params.max_memory
        }
        params.cloudProcess = false
        params.cloudDatabase = false
        includeConfig 'configs/local.config'
    }

    lsf {
        includeConfig 'configs/lsf.config'
    }

    slurm {
        executor {
            name = "slurm"
            queueSize = 200
        }        
        params.cloudProcess = true
        process.cache = "lenient"
        includeConfig 'configs/node.config'
    }

    // engines
    docker { 
        docker { enabled = true }
        includeConfig 'configs/container.config'
    }

    singularity {
        singularity { 
                enabled = true
                autoMounts = true
                cacheDir = params.singularityCacheDir
                envWhitelist = "HTTPS_PROXY,HTTP_PROXY,http_proxy,https_proxy,FTP_PROXY,ftp_proxy"
        }
        includeConfig 'configs/container.config'
    }

    mamba { 
        conda {
            enabled = true
            cacheDir = params.condaCacheDir
            useMamba = true
        }
        includeConfig 'configs/conda.config'
    }

    conda { 
        conda {
            enabled = true
            cacheDir = params.condaCacheDir
        }
        includeConfig 'configs/conda.config'
    }

    // pre-merged
    ebi_lsf {
        params.cloudProcess = false
  	    params.dbs = "/hps/nobackup2/production/metagenomics/$USER/nextflow-databases/"
  	    params.cachedir = "/hps/nobackup/rdf/metagenomics/service-team/singularity-cache/$USER"
        includeConfig 'configs/lsf.config'
        workdir = "/hps/nobackup/rdf/metagenomics/service-team/nextflow-workdir/lr/$params.run_accession"
    }

    yoda {
        params.cloudProcess = true
  	    params.cloudDatabase = "/hps/nobackup2/metagenomics/$USER/nextflow-databases/"
  	    params.cachedir = "/hps/nobackup2/metagenomics/$USER/singularity"
        includeConfig 'configs/lsf.config'

        workDir = params.workdir
        executor {
            name = 'lsf'
            pollInterval = '5 min'
            queueStatInterval = '8 min'
            dumpInterval = '10 min'
            queueSize = 200
        }       
        params.cloudProcess = true
        process.cache = "lenient"
        includeConfig 'configs/node.config'

        singularity { 
                enabled = true
                autoMounts = true
                cacheDir = params.cachedir
        }
        includeConfig 'configs/container.config' 

        process {
            withLabel: spades { cpus = 32; memory = {200.GB * task.attempt}; clusterOptions = '-P bigmem'; errorStrategy = { task.exitStatus in 1 || 130..140 ? 'retry' : 'terminate' }; maxRetries = 4; }
	    }
    }

    ara {
      	params.workdir = "/beegfs/rna-hta/$USER/work"
  	    params.databases = "/beegfs/rna-hta/$USER/nextflow-databases/"
        conda.cacheDir = "/beegfs/rna-hta/$USER/nextflow-mgnify-lr-conda-cache"

        workDir = params.workdir
        executor {
            name = "slurm"
            queueSize = 200
        }        
        params.cloudProcess = true
        process.cache = "lenient"
        includeConfig 'configs/node.config'

        includeConfig 'configs/conda.config' 

        process {
            clusterOptions = '--partition=s_standard,s_fat,b_standard,b_fat'
            withLabel: smallTask { executor = 'local' }
        }
    }

    // CONFIGURE YOUR PRIVATE CLOUD
    gcloud {             
        params.databases = 'gs://databases-matrice/databases/'
        bucketDir = 'gs://matrice/nextflow-tmp/virify'
        //workDir = "/tmp/nextflow-work-$USER"

        executor { name = 'google-lifesciences' }
 
        google {
            project = 'nextflow-auto-255816'
            zone = 'europe-west1-b' 
            lifeSciences.bootDiskSize = '20.GB'
        }  

        params.cloudProcess = true
        includeConfig 'configs/node.config'

        docker { enabled = true }
        includeConfig 'configs/container.config'

        cloud { preemptible = true }

        // we need a docker also for basic functionalities in the cloud
        process {
            withLabel: noDocker { cpus = 1; memory = '4.0 GB'; container = 'nanozoo/template:3.8--ccd0653' } 
        }

    }
}

def check_max(obj, type) {
    if (type == 'memory') {
        try {
            if (obj.compareTo(params.max_memory as nextflow.util.MemoryUnit) == 1)
                return params.max_memory as nextflow.util.MemoryUnit
            else
                return obj
        } catch (all) {
            println "   ### ERROR ###   Max memory '${params.max_memory}' is not valid! Using default value: $obj"
            return obj
        }
    } else if (type == 'time') {
        try {
            if (obj.compareTo(params.max_time as nextflow.util.Duration) == 1)
                return params.max_time as nextflow.util.Duration
            else
                return obj
        } catch (all) {
            println "   ### ERROR ###   Max time '${params.max_time}' is not valid! Using default value: $obj"
            return obj
        }
    } else if (type == 'cpus') {
        try {
            return Math.min( obj, params.max_cpus as int )
        } catch (all) {
            println "   ### ERROR ###   Max cpus '${params.max_cpus}' is not valid! Using default value: $obj"
            return obj
        }
    }
}
